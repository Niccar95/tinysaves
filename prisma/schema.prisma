// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  userId String @id @default(auto()) @map("_id") @db.ObjectId
  name String  @unique
  email String @unique
  image String?
  hashedPassword String
  displayName String?
  goals Goals[]        
  userMilestones UserMilestones[]     
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Goals {
  goalId String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  targetAmount Int
  dueDate DateTime? 
  progress Int
  currency String
  isComplete Boolean
  userId String
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Milestones {
  milestoneId String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  criteria String
  image String
  milestoneUsers UserMilestones[]    
  createdAt DateTime @default(now())
}

model UserMilestones {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  milestoneId String @db.ObjectId
  user User @relation(fields: [userId], references: [userId])
  milestone Milestones @relation(fields: [milestoneId], references: [milestoneId])
  createdAt DateTime @default(now())
  @@unique([userId, milestoneId])  
}
